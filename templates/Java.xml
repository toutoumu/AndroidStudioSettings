<templateSet group="自定义代码模板Java">
  <template name="iiiDivider--RecyclerView分割线" value="// 可以添加数据项分割线&#10;DividerItemDecoration decoration = new DividerItemDecoration(mActivity, LinearLayoutManager.VERTICAL);&#10;decoration.setDrawable(getDrawable(R.drawable.divider));&#10;mRecyclerView.addItemDecoration(decoration);" description="RecyclerView分割线" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiinittoolbar" value="UiUtils.requestStatusBarLight(this, true);&#10;    UiUtils.setCenterTitle(mActivity, getToolBar(), getName());&#10;    getToolBar().setNavigationIcon(R.drawable.ic_back_black);&#10;    getToolBar().setNavigationOnClickListener(v -&gt; getActivity().onBackPressed());" description="公司的:初始化标题栏" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiinitrecyclerview" value="recyclerView.addOnScrollListener(new EndlessScrollListener(this));&#10;    recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));&#10;    recyclerView.setAdapter(new AccessControlAdapter(this, mData, this));" description="所有项目:初始化RecyclerView" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiiirxjava---服务访问带对话框" value="showLoading(&quot;&quot;);&#10;Api.create(MockNetwork.class)&#10;    .postForm(&quot;巴达克&quot;)&#10;    .compose(BaseApi.applySchedulers())&#10;    .retry(BaseApi.timeoutRetry())&#10;    .compose(bindUntilEvent(FragmentEvent.DESTROY_VIEW))&#10;    .subscribe(model -&gt; {&#10;        $END$&#10;    }, e -&gt; {&#10;        closeLoading();&#10;        Timber.e(e);&#10;        showToast(e.getMessage());&#10;    });" description="服务访问带对话框" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiionStatusUpdated方法默认模板" value="// 同步更新加载状态&#10;mSwipeRefreshLayout.setRefreshing(status == LoadingStatus.LOADING);&#10;&#10;if (status == LoadingStatus.SUCCESS &amp;&amp; hasData()) {&#10;    initRecycleView(mData);&#10;}" description="onStatusUpdated方法默认模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiBanner" value="// 初始化banner&#10;BGABanner banner = holder.getView(R.id.banner);&#10;banner.setAdapter((banner1, itemView, model, position1) -&gt; {&#10;    // 绑定图片和点击事件&#10;    Glide.with(HomeFragment.this)&#10;        .load(((Article) model).getHotSuportImage())&#10;        .centerCrop()&#10;        .into((ImageView) itemView);&#10;    itemView.setOnClickListener(view -&gt; {&#10;        // todo banner 点击事件&#10;    });&#10;});&#10;banner.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {&#10;    // todo banner切换事件&#10;});" description="Banner" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiAdapterOne" value="RecyclerView.Adapter&lt;?&gt; adapter = new RecyclerViewAdapter&lt;User&gt;(mActivity, R.layout.item_home, mData) {&#10;    @Override&#10;    protected void convert(@NonNull RecyclerViewHolder holder, @NonNull User data, int position) {&#10;        // todo 在这里绑定列表数据&#10;    }&#10;};&#10;&#10;// header &#10;adapter = new HeaderWrapper&lt;Object&gt;(adapter, 100) {&#10;    @Override&#10;    protected int getItemViewLayoutId() {&#10;        return R.layout.header_home;&#10;    }&#10;&#10;    @Override&#10;    protected void convert(@NonNull RecyclerViewHolder holder, int position) {&#10;        super.convert(holder, position);&#10;    }&#10;};&#10;&#10;// 加载更多&#10;adapter = new LoadMoreWrapper(adapter, this);&#10;return adapter;" description="一种类型的RecyclerView适配器初始化" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiSetupViewPage" value="private void setupViewPager(ViewPager viewPager, TabLayout tabLayout) {&#10;    tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);&#10;    FragmentAdapter fragmentAdapter = new FragmentAdapter(getChildFragmentManager());&#10;    fragmentAdapter.addFragment(&quot;推荐资讯&quot;, new RecommendNewsFragment());&#10;    fragmentAdapter.addFragment(&quot;会员企业&quot;, new RecommendNewsFragment());&#10;    viewPager.setAdapter(fragmentAdapter);&#10;    // 设置监听&#10;    viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout) {&#10;        @Override&#10;        public void onPageSelected(int position) {&#10;            super.onPageSelected(position);&#10;        }&#10;    });&#10;    tabLayout.setupWithViewPager(viewPager);&#10;}" description="Banner" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiGlideCenter" value="// 中间部分                          &#10;Glide.with($Fragment$.this)&#10;    .load(&quot;$url$&quot;)&#10;    .apply(RequestOptions.centerCropTransform())&#10;    .into($Image$);" description="中间部分" toReformat="true" toShortenFQNames="true">
    <variable name="Fragment" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Image" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiGlideCircle" value="// 圆形                           &#10;Glide.with($Fragment$.this)&#10;      .load(&quot;$url$&quot;)&#10;    .apply(RequestOptions.circleCropTransform())&#10;    .into($Image$)" description="圆形图片" toReformat="true" toShortenFQNames="true">
    <variable name="Fragment" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Image" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiRound" value="// 圆角边框&#10;MultiTransformation t = new MultiTransformation(new CenterCrop(),&#10;                                                new RoundedCornersTransformation(SizeUtils.dp2px(5f), 0, RoundedCornersTransformation.CornerType.ALL));&#10;RequestOptions requestOptions = new RequestOptions().transform(t);&#10;&#10;Glide.with($Fragment$.this )&#10;    .load(&quot;$url$&quot;)&#10;    .apply(requestOptions)&#10;    .into($Image$);" description="圆角图片" toReformat="true" toShortenFQNames="true">
    <variable name="Fragment" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Image" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiDialogButtonSheet-底部弹出的选择框" value="DialogPlus dialogPlus = DialogPlus.newDialog(mActivity)&#10;    .setHeader(R.layout.dialog_header)&#10;    .setAdapter(new ArrayAdapter&lt;&gt;(mActivity,&#10;                                   R.layout.dialog_item,&#10;                                   R.id.item,&#10;                                   Arrays.asList(&quot;拍摄&quot;, &quot;从手机相册选择&quot;)))&#10;    .setOnItemClickListener((dialog, item, view, position) -&gt; {&#10;        dialog.dismiss();&#10;        switch ((String) item) {&#10;            case &quot;&quot;:&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    })&#10;    .setFooter(R.layout.dialog_footer)&#10;    .setGravity(Gravity.BOTTOM)&#10;    .setMargin(0, 0, 0, 0)&#10;    .setContentHeight(ViewGroup.LayoutParams.WRAP_CONTENT)&#10;    .setContentWidth(ViewGroup.LayoutParams.MATCH_PARENT)&#10;    .create();&#10;dialogPlus.show();&#10;TextView textView = dialogPlus.getHeaderView().findViewById(R.id.header);&#10;textView.setText(&quot;选择城市&quot;);&#10;TextView footer = dialogPlus.getFooterView().findViewById(R.id.footer);&#10;footer.setText(&quot;取消&quot;);&#10;footer.setOnClickListener(v1 -&gt; {&#10;    dialogPlus.dismiss();&#10;});" description="底部弹出的选择框" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiSelectDate" value="/*&#10; * @description&#10; *&#10; * 注意事项：&#10; * 1.自定义布局中，id为 optionspicker 或者 timepicker 的布局以及其子控件必须要有，否则会报空指针.&#10; * 具体可参考demo 里面的两个自定义layout布局。&#10; * 2.因为系统Calendar的月份是从0-11的,所以如果是调用Calendar的set方法来设置时间,月份的范围也要是从0-11&#10; * setRangDate方法控制起始终止时间(如果不设置范围，则使用默认时间1900-2100年，此段代码可注释)&#10; */&#10;Calendar selectedDate = Calendar.getInstance();//系统当前时间&#10;Calendar startDate = Calendar.getInstance();&#10;startDate.set(2014, 1, 23);// 2014-02-23&#10;Calendar endDate = Calendar.getInstance();&#10;endDate.set(2027, 2, 28);// 2027-02-28&#10;//时间选择器 ，自定义布局&#10;new TimePickerBuilder(mActivity, new OnTimeSelectListener() {&#10;    @Override&#10;    public void onTimeSelect(Date date, View v) {//选中事件回调&#10;        showToast(date.toString());&#10;    }&#10;})&#10;    .setDate(selectedDate)&#10;    // .setRangDate(startDate, endDate)&#10;    .setContentTextSize(18)&#10;    .setType(new boolean[] { true, true, true, false, false, false })// 年月日时分秒都显示&#10;    .setLabel(&quot;年&quot;, &quot;月&quot;, &quot;日&quot;, &quot;时&quot;, &quot;分&quot;, &quot;秒&quot;)&#10;    // .setLineSpacingMultiplier(1.2f) //文字扭曲成一个弧形,这个弧形角度设置&#10;    // .setTextXOffset(0, 0, 0, 40, 0, -40)&#10;    .isCenterLabel(false) // 是否只显示中间选中项的label文字，false则每项item全部都带有label。&#10;    .setDividerColor(getColor(R.color.gray))&#10;    .build()&#10;    .show();" description="日期选择" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiDialogSelectCity" value="DialogPlus dialogPlus = DialogPlus.newDialog(mActivity)&#10;    .setContentHolder(new ViewHolder(R.layout.dialog_region))&#10;    .setHeader(R.layout.dialog_header_submit_cancel)&#10;    .create();&#10;dialogPlus.show();&#10;&#10;// 初始化滚轮&#10;List&lt;Region&gt; regions = Region.getRegions(mActivity);&#10;WheelView province = dialogPlus.getHolderView().findViewById(R.id.province);&#10;WheelView city = dialogPlus.getHolderView().findViewById(R.id.city);&#10;province.setCyclic(false);&#10;city.setCyclic(false);&#10;province.setAdapter(new ArrayWheelAdapter&lt;&gt;(regions));&#10;city.setAdapter(new ArrayWheelAdapter&lt;&gt;(regions.get(0).getCity()));&#10;province.setOnItemSelectedListener(index -&gt; {&#10;    city.setAdapter(new ArrayWheelAdapter&lt;&gt;(regions.get(index).getCity()));&#10;    city.invalidate();&#10;});&#10;&#10;province.setCurrentItem(0);&#10;&#10;// 确定取消&#10;dialogPlus.getHeaderView().findViewById(R.id.cancel).setOnClickListener(v12 -&gt; dialogPlus.dismiss());&#10;dialogPlus.getHeaderView().findViewById(R.id.confirm).setOnClickListener(v13 -&gt; {&#10;    dialogPlus.dismiss();&#10;    Region region = regions.get(province.getCurrentItem());&#10;    Region.CityBean cityBean = region.getCity().get(city.getCurrentItem());&#10;    filterCity = cityBean.getName();&#10;    headerBind.filterCity.setText(cityBean.getName());&#10;    obtainData(true);&#10;});" description="省份,城市选择" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiiRequestWithDialog" value="BlockDialog dialog = BlockDialog.showDialog(mActivity);&#10;Api.create(BeiJingApi.class)&#10;    .theme()&#10;    .retry(timeoutRetry())&#10;    .compose(applySchedulers())&#10;    .compose(bindUntilEvent(FragmentEvent.DESTROY))&#10;    .subscribe(model -&gt; {&#10;        dialog.dismiss();&#10;        if (model.isError()) {&#10;            showToast(model.getMessage());&#10;            return;&#10;        }&#10;        // todo 服务调用成功后的处理&#10;    }, throwable -&gt; {&#10;        dialog.dismiss();&#10;        showToast(throwable.getMessage());&#10;        Timber.e(throwable);&#10;    });" description="请求服务并展示对话框" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>