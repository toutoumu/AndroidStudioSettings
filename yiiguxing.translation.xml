<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="387" />
    <option name="newTranslationDialogWidth" value="835" />
    <option name="newTranslationDialogX" value="331" />
    <option name="newTranslationDialogY" value="245" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="machine Component Names" />
      <item value="machine Type Name" />
      <item value="machine Position Name" />
      <item value="repair Staff Name" />
      <item value="ACTION MANAGE OVERLAY PERMISSION" />
      <item value="qualification Certificate Deferred List" />
      <item value="Practitioner Type" />
      <item value="Clinical Department" />
      <item value="Certification Type" />
      <item value="practitioner Type List" />
      <item value="material Name" />
      <item value="Preview of new language features: JVM records support, sealed interfaces, and stable inline classes. KotlinJVM: IR backend is now in Beta. KotlinNative: performance improvements, new `watchosX64` simulator target, support for Xcode 12.2 libraries. KotlinJS: prototype lazy initialization of top-level properties. Support for Gradle configuration cache. Standard library API improvements: locale-agnostic API for upperlowercasing text and clear Char-to-code and Char-to-digit conversions." />
      <item value="Maintain" />
      <item value="保养" />
      <item value="Conversation Icon View" />
      <item value="do nothing" />
      <item value="doctor Certificate" />
      <item value="List = certification?" />
      <item value="clinical Department List" />
      <item value="Returns whether the primary sharedexternal storage media is physically removable." />
      <item value="说明" />
      <item value="Mission Statement" />
      <item value="Ask For Task" />
      <item value="Construction" />
      <item value="施工" />
      <item value="add From Customer" />
      <item value="Mission Statement Activity" />
      <item value="uses Cleartext Traffic" />
      <item value="Gloading Certification Pending Review View" />
      <item value="NOT APPLIED" />
      <item value="PENDING REVIEW" />
      <item value="mould Status" />
      <item value="maintain Status" />
      <item value="模具" />
      <item value="ACTION SCREEN OFF" />
      <item value="@deprecated Instead of retaining the Fragment itself, use a non-retained Fragment and keep retained state in a ViewModel attached to that Fragment. The ViewModel's constructor and its onCleared() callback provide the signal for initial creation and final destruction of the retained state." />
      <item value="turn passcode on off" />
      <item value="PREVIEW POST PROCESSING MODE" />
      <item value="Return the primary sharedexternal storage directory where this application's OBB files (if there are any) can be found. Note if the application does not have any OBB files, this directory may not exist. &lt;p&gt;" />
      <item value="Returns absolute path to application-specific directory in the preloaded cache. &lt;p&gt;Files stored in the cache directory can be deleted when the device runs low on storage. There is no guarantee when these files will be deleted." />
      <item value="Retrieve, creating if needed, a new directory in which the application can place its own custom data files. You can use the returned File object to create and access files in this directory. Note that files created through a File object will only be accessible by your own application; you can only set the mode of the entire directory, not of individual files." />
      <item value="Coroutine" />
      <item value="Adds the given observer to the observers list. This call is similar to {@link LiveDataobserve(LifecycleOwner, Observer)} with a LifecycleOwner, which is always active. This means that the given observer will receive all events and will never be automatically removed. You should manually call {@link removeObserver(Observer)} to stop observing this LiveData. While LiveData has one of such observers, it will be considered as active." />
      <item value="To use only without reflection variants of viewBinding" />
      <item value="Prescription Drug Audit Details Fragment" />
      <item value="Have the content fill (possibly only partially) the [Constraints.maxWidth] of the incoming measurement constraints, by setting the [minimum width][Constraints.minWidth] and the [maximum width][Constraints.maxWidth] to be equal to the [maximum width][Constraints.maxWidth] multiplied by [fraction]. Note that, by default, the [fraction] is 1, so the modifier will make the content fill the whole available width. If the incoming maximum width is [Constraints.Infinity] this modifier will have no effect." />
      <item value="determine" />
      <item value="Coroutine Scope" />
      <item value="immediate" />
      <item value="Launches a new coroutine without blocking the current thread and returns a reference to the coroutine as a [Job]. The coroutine is cancelled when the resulting job is [cancelled][Job.cancel]. The coroutine context is inherited from a [CoroutineScope]. Additional context elements can be specified with [context] argument. If the context does not have any dispatcher nor any other [ContinuationInterceptor], then [Dispatchers.Default] is used. The parent job is inherited from a [CoroutineScope] as well, but it can also be overridden with a corresponding [context] element. By default, the coroutine is immediately scheduled for execution. Other start options can be specified via `start` parameter. See [CoroutineStart] for details. An optional [start] parameter can be set to [CoroutineStart.LAZY] to start coroutine _lazily_. In this case, the coroutine [Job] is created in _new_ state. It can be explicitly started with [start][Job.start] function and will be started implicitly on the first invocation of [join][Job.join]. Uncaught exceptions in this coroutine cancel the parent job in the context by default (unless [CoroutineExceptionHandler] is explicitly specified), which means that when `launch` is used with the context of another coroutine, then any uncaught exception leads to the cancellation of the parent coroutine. See [newCoroutineContext] for a description of debugging facilities that are available for a newly created coroutine. @param context additional to [CoroutineScope.coroutineContext] context of the coroutine. @param start coroutine start option. The default value is [CoroutineStart.DEFAULT]. @param block the coroutine code which will be invoked in the context of the provided scope." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="893" />
        <entry key="ENGLISH" value="894" />
        <entry key="ESTONIAN" value="1" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="4" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617006918884" />
  </component>
</application>