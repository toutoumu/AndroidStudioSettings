<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="566" />
    <option name="newTranslationDialogY" value="382" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="FAIL ON PROJECT REPOS" />
      <item value="A layout composable that places its children in a horizontal sequence. For a layout composable that places its children in a vertical sequence, see [Column]. For a layout that places children in a horizontal sequence and is also scrollable, see `ScrollableRow`. For a horizontally scrollable list that only composes and lays out the currently visible items see `LazyRow`. The [Row] layout is able to assign children widths according to their weights provided using the [RowScope.weight] modifier. If a child is not provided a weight, it will be asked for its preferred width before the sizes of the children with weights are calculated proportionally to their weight based on the remaining available space. When none of its children have weights, a [Row] will be as small as possible to fit its children one next to the other. In order to change the width of the [Row], use the [Modifier.requiredWidth] modifiers; e.g. to make it fill the available width [Modifier.fillMaxWidth] can be used. If at least one child of a [Row] has a [weight][RowScope.weight], the [Row] will fill the available width, so there is no need for [Modifier.fillMaxWidth]. However, if [Row]'s size should be limited, the [Modifier.requiredWidth] or [Modifier.requiredSize] layout modifiers should be applied. When the size of the [Row] is larger than the sum of its children sizes, a [horizontalArrangement] can be specified to define the positioning of the children inside the [Row]. See [Arrangement] for available positioning behaviors; a custom arrangement can also be defined using the constructor of [Arrangement]." />
      <item value="recreating" />
      <item value="Bottom" />
      <item value="Have the content fill (possibly only partially) the [Constraints.maxWidth] of the incoming measurement constraints, by setting the [minimum width][Constraints.minWidth] and the [maximum width][Constraints.maxWidth] to be equal to the [maximum width][Constraints.maxWidth] multiplied by [fraction]. Note that, by default, the [fraction] is 1, so the modifier will make the content fill the whole available width. If the incoming maximum width is [Constraints.Infinity] this modifier will have no effect." />
      <item value="determine" />
      <item value="Coroutine Scope" />
      <item value="immediate" />
      <item value="Launches a new coroutine without blocking the current thread and returns a reference to the coroutine as a [Job]. The coroutine is cancelled when the resulting job is [cancelled][Job.cancel]. The coroutine context is inherited from a [CoroutineScope]. Additional context elements can be specified with [context] argument. If the context does not have any dispatcher nor any other [ContinuationInterceptor], then [Dispatchers.Default] is used. The parent job is inherited from a [CoroutineScope] as well, but it can also be overridden with a corresponding [context] element. By default, the coroutine is immediately scheduled for execution. Other start options can be specified via `start` parameter. See [CoroutineStart] for details. An optional [start] parameter can be set to [CoroutineStart.LAZY] to start coroutine _lazily_. In this case, the coroutine [Job] is created in _new_ state. It can be explicitly started with [start][Job.start] function and will be started implicitly on the first invocation of [join][Job.join]. Uncaught exceptions in this coroutine cancel the parent job in the context by default (unless [CoroutineExceptionHandler] is explicitly specified), which means that when `launch` is used with the context of another coroutine, then any uncaught exception leads to the cancellation of the parent coroutine. See [newCoroutineContext] for a description of debugging facilities that are available for a newly created coroutine. @param context additional to [CoroutineScope.coroutineContext] context of the coroutine. @param start coroutine start option. The default value is [CoroutineStart.DEFAULT]. @param block the coroutine code which will be invoked in the context of the provided scope." />
      <item value="pass Audit" />
      <item value="pass After Sale" />
      <item value="get Logistics Info" />
      <item value="trello" />
      <item value="The creator for the connection implemented with the okhttp3." />
      <item value="Trust Any Trust Manager" />
      <item value="goods List" />
      <item value="is Push Retreat Price" />
      <item value="m Tv Order End Consultation" />
      <item value="Serving Fragment" />
      <item value="SILENCE" />
      <item value="income New Instance" />
      <item value="The number of digits allowed in the fraction portion of value." />
      <item value="The minimum number of digits allowed in the integer portion of value." />
      <item value="True to set grouping will be used in this format, false otherwise." />
      <item value="exclude From Recents" />
      <item value="quick Medicine List Update" />
      <item value="clinic List" />
      <item value="Preparation Pharmacy Quick Activity" />
      <item value="cy Activity::class.java)" />
      <item value="Quick Drug Order Details Add Online Shopping Mall Activity" />
      <item value="Quick Drug Order Details Add Chinese Medicine Mall Activity" />
      <item value="Quick Drug Order Details Add Preparation Pharmacy Activity" />
      <item value="Online Shopping Mall Quick Activity" />
      <item value="Chinese Medicine Mall Quick Activity" />
      <item value="Inquiry Details Diagnostic Info" />
      <item value="咨询" />
      <item value="clinic Count" />
      <item value="is External Storage Manager" />
      <item value="Member Company" />
      <item value="Base class for activities that enables composition of higher level components. &lt;p&gt; Rather than all functionality being built directly into this class, only the minimal set of lower level building blocks are included. Higher level components can then be used as needed without enforcing a deep Activity class hierarchy or strong coupling between components." />
      <item value="Courses Fragment" />
      <item value="Returns an Observable that emits only the first item emitted by the source ObservableSource during sequential time windows of a specified duration." />
      <item value="The time span." />
      <item value="association" />
      <item value="hangup" />
      <item value="mute Local Audio" />
      <item value="Millis" />
      <item value="delay Millis" />
      <item value="Gregorian Calendar" />
      <item value="VIEW EVALUATION ENABLE" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="856" />
        <entry key="ENGLISH" value="857" />
        <entry key="ESTONIAN" value="1" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="4" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1615553857350" />
  </component>
</application>